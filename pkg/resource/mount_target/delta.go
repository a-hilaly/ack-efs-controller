// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package mount_target

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.FileSystemID, b.ko.Spec.FileSystemID) {
		delta.Add("Spec.FileSystemID", a.ko.Spec.FileSystemID, b.ko.Spec.FileSystemID)
	} else if a.ko.Spec.FileSystemID != nil && b.ko.Spec.FileSystemID != nil {
		if *a.ko.Spec.FileSystemID != *b.ko.Spec.FileSystemID {
			delta.Add("Spec.FileSystemID", a.ko.Spec.FileSystemID, b.ko.Spec.FileSystemID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.FileSystemRef, b.ko.Spec.FileSystemRef) {
		delta.Add("Spec.FileSystemRef", a.ko.Spec.FileSystemRef, b.ko.Spec.FileSystemRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.IPAddress, b.ko.Spec.IPAddress) {
		delta.Add("Spec.IPAddress", a.ko.Spec.IPAddress, b.ko.Spec.IPAddress)
	} else if a.ko.Spec.IPAddress != nil && b.ko.Spec.IPAddress != nil {
		if *a.ko.Spec.IPAddress != *b.ko.Spec.IPAddress {
			delta.Add("Spec.IPAddress", a.ko.Spec.IPAddress, b.ko.Spec.IPAddress)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.SecurityGroupRefs, b.ko.Spec.SecurityGroupRefs) {
		delta.Add("Spec.SecurityGroupRefs", a.ko.Spec.SecurityGroupRefs, b.ko.Spec.SecurityGroupRefs)
	}
	if len(a.ko.Spec.SecurityGroups) != len(b.ko.Spec.SecurityGroups) {
		delta.Add("Spec.SecurityGroups", a.ko.Spec.SecurityGroups, b.ko.Spec.SecurityGroups)
	} else if len(a.ko.Spec.SecurityGroups) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.SecurityGroups, b.ko.Spec.SecurityGroups) {
			delta.Add("Spec.SecurityGroups", a.ko.Spec.SecurityGroups, b.ko.Spec.SecurityGroups)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SubnetID, b.ko.Spec.SubnetID) {
		delta.Add("Spec.SubnetID", a.ko.Spec.SubnetID, b.ko.Spec.SubnetID)
	} else if a.ko.Spec.SubnetID != nil && b.ko.Spec.SubnetID != nil {
		if *a.ko.Spec.SubnetID != *b.ko.Spec.SubnetID {
			delta.Add("Spec.SubnetID", a.ko.Spec.SubnetID, b.ko.Spec.SubnetID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.SubnetRef, b.ko.Spec.SubnetRef) {
		delta.Add("Spec.SubnetRef", a.ko.Spec.SubnetRef, b.ko.Spec.SubnetRef)
	}

	return delta
}
